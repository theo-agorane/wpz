<?php

class WPZ_Block_Generator {

	private $key;
	private $acf_key;
	private $title;
	public static $boilerplate_dir = BLOCKS_PLUGIN . '/boilerplate';
	private $replacements = [];
	private static $message_autogenerated = "// This file is auto-generated, don't edit";

	public function __construct($key, $title = '') {
		$this->key = $key;
		$this->title = $title;
		$this->acf_key = Blocks::get_acf_group_key_by_block_id($this->key);

		$this->replacements = [
			'BlockACFKey' => $this->acf_key,
			'BlockTitle' => $this->title,
			'BlockKey' => $this->key,
		];
	}

	private function get_boilerplate() {
		if (is_dir(WPZ_Block_Generator::$boilerplate_dir)) {
			$files = array_diff(scandir(WPZ_Block_Generator::$boilerplate_dir), ['.', '..']);

			return $files;
		}

		return [];
	}

	public function create_block() {
		$files = $this->get_boilerplate();
		$dir = Blocks::$blocks_dir . '/' . $this->key;

		// 1. On crée le dossier s'il n'existe pas
		if (!is_dir($dir)) {
			mkdir($dir, 0755, true);
		}

		foreach ($files as $filename) {
			// 2. On récupère le contenu du fichier
			$filepath = WPZ_Block_Generator::$boilerplate_dir . '/' . $filename;
			$file = file_get_contents($filepath);

			// 3. On change le contenu et le nom du fichier
			$new_file = strtr($file, $this->replacements);
			$new_filename = strtr($filename, $this->replacements);
			$new_filepath = $dir . '/' . $new_filename;

			// 4. On crée le fichier
			file_put_contents($new_filepath, $new_file);
		}

		WPZ_Block_Generator::update_global_sass_js();
	}

	public static function update_global_sass_js() {
		$file_sass = BLOCKS_PLUGIN . '/generated/blocks.scss';
		$file_js = BLOCKS_PLUGIN . '/generated/blocks.js';
		$blocks = Blocks::load_blocks();

		$sass = WPZ_Block_Generator::$message_autogenerated;
		$js = WPZ_Block_Generator::$message_autogenerated;

		foreach ($blocks as $block) {
			$dir = '../../../blocks/' . $block . '/';

			$sass .= "\r\n@import '". $dir ."". $block .".scss';";
			$js .= "\r\nimport '". $dir ."". $block .".js';";
		}

		file_put_contents($file_sass, $sass);
		file_put_contents($file_js, $js);
	}

	public function delete_block() {
		// 1. On supprime le dossier
		$dir = Blocks::$blocks_dir . '/' . $this->key;

		if (is_dir($dir)) {
			WPZ_Block_Generator::delete_directory($dir);
		}

		// 2. On regénère les SASS/JS
		WPZ_Block_Generator::update_global_sass_js();

		// 3. On supprime le groupe ACF
		//add_action('acf/init', [$this, 'acf_delete_group']);
		$this->acf_delete_group();
	}

	public static function delete_directory($dir) {
	    if (is_file($dir)) {
	        return unlink($dir);
	    }
	    elseif (is_dir($dir)) {
	        $scan = glob(rtrim($dir, '/').'/*');

	        foreach($scan as $index=>$path) {
	            WPZ_Block_Generator::delete_directory($path);
	        }
	          
	        return @rmdir($dir);
	    }
	}

	public function acf_delete_group() {
		acf_delete_field_group($this->acf_key);
	}
	
}